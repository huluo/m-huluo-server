#运行用户
user  nobody;

#启动进程,通常设置成和cpu的数量相等
worker_processes  8;

#全局错误日志及PID文件
error_log  /web/m-huluo-server/logs/nginx.error.log;
#error_log  /web/m-huluo-server/logs/error.log  notice;
#error_log  /web/m-huluo-server/logs/error.log  info;
pid        /var/run/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile 51200; #for centos
#worker_rlimit_nofile 1024; #for mac

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll; #for centos
    #单个后台worker process进程的最大并发链接数
    worker_connections  51200; #for centos
    #worker_connections  1024; #for mac
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    #设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #日志
    #access_log  /web/m-huluo-server/logs/nginx.access.log;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    include /usr/local/nginx/conf/available-sites/*.conf;
    include /usr/local/nginx/conf/available-sites/*/*.conf;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;
        #access_log  /web/m-huluo-server/logs/nginx.access.log;

        #错误提示页面
        #error_page  404              /503.html;
        # redirect server error pages to the static page /50x.html
        #
        #error_page  500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

